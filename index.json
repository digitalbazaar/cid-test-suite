{
  "matrices": [
    {
      "title": "Json Schema Conformance",
      "ctx": null,
      "suites": [
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The resolved document is valid.",
              "body": "async function() {\n          expect(document).to.be.jsonSchema(documentSchema);\n        //   document.should.be.jsonSchema(documentSchema);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/cid-test-suite/cid-test-suite/tests/01-schema.js",
              "parent": "vf6g8GjCBhEXAy2PSOVjg",
              "ctx": null,
              "_testId": "urn:uuid:bcbbbc22-1603-4075-9569-b8a91ccdf28d",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The resolved document is valid."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n// append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vf6g8GjCBhEXAy2PSOVjg",
              "ctx": null,
              "file": "/home/runner/work/cid-test-suite/cid-test-suite/tests/01-schema.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n        try {\n          document = await resolveDocument(documentEndpoint);\n        } catch(e) {\n          console.error(\n            `Couldn't resolve document.`,\n            e\n          );\n        }\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vf6g8GjCBhEXAy2PSOVjg",
              "ctx": null,
              "file": "/home/runner/work/cid-test-suite/cid-test-suite/tests/01-schema.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 362,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 785,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SU0h-ISMCtoPa6qtW9uKe",
          "file": "/home/runner/work/cid-test-suite/cid-test-suite/tests/01-schema.js",
          "_testId": "urn:uuid:37d129b4-19b3-4f4c-970d-7e16749a913c"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "4g8amoRmhZwHxaxFPpppk",
      "file": "/home/runner/work/cid-test-suite/cid-test-suite/tests/01-schema.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:77096559-021d-4721-825f-052952ff093d",
      "columns": [
        "OpSecId"
      ],
      "rows": [
        {
          "id": "The resolved document is valid.",
          "cells": [
            {
              "type": "test",
              "title": "The resolved document is valid.",
              "body": "async function() {\n          expect(document).to.be.jsonSchema(documentSchema);\n        //   document.should.be.jsonSchema(documentSchema);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/cid-test-suite/cid-test-suite/tests/01-schema.js",
              "parent": "vf6g8GjCBhEXAy2PSOVjg",
              "ctx": null,
              "_testId": "urn:uuid:bcbbbc22-1603-4075-9569-b8a91ccdf28d",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The resolved document is valid."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "At Risk",
      "rowLabel": "Statement",
      "columnLabel": "Reason",
      "columns": [
        "At least 2 passing implementations"
      ],
      "rows": [
        {
          "id": "The resolved document is valid.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "shortName": "cid-test-suite",
    "group": "vc",
    "specStatus": "base",
    "subtitle": "Controlled Identifiers (CIDs) v1.0 Conformance Report",
    "github": "https://github.com/OpSecId/cid-test-suite",
    "edDraftURI": "https://opsecid.github.io/cid-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "otherLinks": [
      {
        "key": "Related Specifications",
        "data": [
          {
            "value": "Controlled Identifiers (CIDs) v1.0",
            "href": "https://w3c.github.io/cid/"
          }
        ]
      }
    ],
    "authors": [
      {
        "name": "Patrick St. Louis",
        "url": "https://github.com/PatStLouis",
        "company": "OpSecId",
        "companyURL": "https://github.com/OpSecId"
      }
    ]
  },
  "title": "VC v2.0 Interoperability Report",
  "stats": [],
  "statusMarkLabels": {
    "pending": {
      "icon": "üö´",
      "label": "Pending"
    },
    "passed": {
      "icon": "‚úì",
      "label": "Passed"
    },
    "failed": {
      "icon": "‚ùå",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "‚äò",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "‚è±",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "‚Äî",
      "label": "Not Implemented"
    }
  }
}